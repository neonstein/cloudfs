./src/
├── cloudfs                        The directory containing skeleton code for CloudFS
│   ├── cloudapi.c                 The wrapper functions of libs3
│   ├── cloudapi.h
│   ├── cloudfs.c                  The skeleton code of CloudFS FUSE implementation
│   ├── cloudfs.h
│   ├── example.c                  An example of showing how to use functions in cloudapi.h
│   └── main.c                     The main function for CloudFS that parses command line to extract options
├── include
│   └── libs3.h                    The header file of libs3
├── lib
│   └── libs3.a                    The library file of libs3. To get different binary, you can download libs3 from its website, and compile it by yourself.
├── Makefile                       "make" generates the binary "src/build/bin/cloudfs", and "make example" generates "src/build/bin/example"
├── README
├── s3-client                      An example of how to use the original libs3 library
│   ├── include
│   │   └── libs3.h
│   ├── lib
│   │   └── libs3.a
│   ├── Makefile
│   ├── src
│   │   └── s3.c
│   └── test.sh
├── s3-server
│   ├── run_server                  An example script that runs S3 server in default port
│   └── s3server.pyc                Compiled python code of web server. Run ``python ./s3server.py --help" to list all the options
└── scripts
    ├── small_test.tar.gz           Test files from small to large
    ├── big_test.tar.gz
    ├── large_test.tar.gz
    ├── cloudfs_controller.sh       A script that mounts CloudFS 
    ├── format_disks.sh             A script that formats SSD and HDD into Ext2 file system
    ├── mount_disks.sh              A script that mounts SSD and HDD
    ├── README
    ├── stat_summarizer             A program that cacluates the number of disk accesses in SSD and HDD
    ├── test_part1.sh               A test script for part one
    ├── test_part2.sh               A test script for part two
    ├── test_part2_workload.py
    └── umount_disks.sh             A script that umounts SSD and HDD

1. How to run example.c ?

   (a) Build example:
       Under src directory, run the command:
       make example
  
   (b) Create a temporary file:
       /tmp/README
       
   (c) Run S3 server under src/s3-server/:
       ./run_server &
    or:
       python ./s3server.pyc &

   (d) Run example:
       ./build/bin/example
       
2. How to extract cloud cost from S3 server?
   Assume your server binds to localhost:8888
   You can use:
   curl http://localhost:8888/admin/stat 
   To get cloud usage statistics:
    NumRequests: number of requests S3 server received from the boot 
    NumReadBytes: number of bytes S3 server sent out from the boot 
    CurrentUsage: total size of files S3 server store currently (assume the server is empty at the beginning)
    MaxUsage: maximum usage of S3 server from the boot

   
     
